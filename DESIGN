======
DESIGN
======

Patch theory
------------

Besides the well-known "double spend" problem many decentralized currencies have,
Oscoin has a problem of its own, which we will call the "conflicting patch"
problem. The situation is as follows:

1. Alice and Bob are working off of the master branch of project Acme.
2. Alice and Bob are located in different places in the world, and typically
   communicate with different nodes when pushing and pulling code.
3. One day, Alice is working late, which coincides with Bob's working hours,
   and they push a patch to Acme at the same time, to their respective nodes.
4. Now the two nodes, let's call them A and B need to agree on the order of
   transactions: did Alice's patch come first, or Bobs? Depending on the state
   of the consensus system, 'A' might decide on order, or 'B' might decide on
   order.
5. The problem here is that we wouldn't want the outcomes of the consensus to
   be a deciding factor on the resulting code. In other words, whether Alice's
   or Bob's patch comes first shouldn't *generally* matter to Alice and Bob.
6. There are two cases here, the general and the exceptional.
   a. General: in most cases, Alice and Bob will be working on different files,
      or different parts of the same file. This means that theoretically, the
      order in which the patches are applied shouldn't affect the resulting code.
      In other words, if Alice's patch is called ``P`` and Bob's is ``Q``, then
      ``PQ = QP``. This property is called *commutativity*. This is possible
      in VCSs that use patches instead of snapshots. The patch is independent
      of what came before, and its hash is solely based on its content, not its
      parent.
   b. Exceptional: in certain cases, if for example Alice and Bob are working
      on the same lines of code, the order in which the patches are applied
      affects the output. Either Bob gets the final word, or Alice. In this case
      there is no theoretical model that can help us. Alice and Bob need to agree
      on which patch should come first, or whether to produce an entirely new
      patch. If this is the situation, the consensus system should signal the
      conflict, and apply neither patch, leaving it up to Alice or Bob to resolve
      the issue.

This sounds pretty good. The problem though is that certain VCSs like *git* do
not have commutative patch application. This means that the order in which the
patches are applied *always* matters. It may not affect the source files, but
it will affect the final commit hash, resulting in a fork.

.. vim: filetype=rst
